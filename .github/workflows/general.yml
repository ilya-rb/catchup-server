name: CI

on:
  push:
    branches:
      - master

env:
  SQLX_VERSION: 0.8.2
  SQLX_FEATURES: "rustls,postgres"
  APP_USER: app
  APP_USER_PWD: secret
  APP_DB_NAME: catchup

jobs:
  fmt:
    name: Rust fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: true
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - name: Linting
        run: cargo clippy -- -D warnings

#  test:
#    name: Tests
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:14
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: password
#          POSTGRES_DB: postgres
#        ports:
#          - 5432:5432
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Install Rust
#        uses: actions-rust-lang/setup-rust-toolchain@v1
#
#      - name: Install sqlx-cli
#        run:
#          cargo install sqlx-cli
#          --version=${{ env.SQLX_VERSION }}
#          --features ${{ env.SQLX_FEATURES }}
#          --no-default-features
#          --locked
#
#      - name: Create DB user
#        run: |
#          sudo apt-get install postgresql-client
#
#          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PWD}';"
#          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${CREATE_QUERY}"
#
#          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
#          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${GRANT_QUERY}"
#
#      - name: Migrate DB
#        run: |
#          SKIP_DOCKER=true ./scripts/init_db.sh
#
#      - name: Run tests
#        run: cargo test
#
#      - name: Check queries validation
#        run: cargo sqlx prepare --workspace --check -- --all-targets
